<?xml version="1.0"?>
<launch>

	<arg name="robot" default="$(optenv ROBOT !!NO_ROBOT_SET!!)"/>
	<arg name="pkg_hardware_config" default="$(find cob_hardware_config)"/>
	<arg name="detection_mode" default="reflector_referencing"/>
	<arg name="multi_station" default="true"/>
	<arg name="sim" default="false"/>
	<arg name="emulator" default="false"/>

	<rosparam ns="/diagnostic_aggregator">{analyzers: {scenario: {type: diagnostic_aggregator/AnalyzerGroup, path: Scenario, analyzers: {station_detector: {type: diagnostic_aggregator/GenericAnalyzer, path: StationDetector, contains: ['station_detector']}}}}}</rosparam>

	<!-- station detection -->
	<group if="$(eval detection_mode == 'reflector_referencing')">
		<node pkg="laser_filters" type="scan_to_scan_filter_chain" name="docking_laser_filter">
			<rosparam command="load" file="$(arg pkg_hardware_config)/robots/$(arg robot)/config/docking_laser_filter.yaml"/>
			<remap from="scan" to="/scan_unified"/>
			<remap from="scan_filtered" to="/station_detector/scan"/>
		</node>
		<node unless="$(arg emulator)" name="station_detector" pkg="cob_reflector_referencing" type="reflector_referencing_node" output="screen">
			<rosparam command="load" file="$(arg pkg_hardware_config)/robots/$(arg robot)/config/docking_stations.yaml"/>
			<remap from="laser_scan_in" to="/station_detector/scan"/>
		</node>
		<include if="$(arg emulator)" file="$(find mojin_bringup)/tools/fake_diagnostics.launch">
			<arg name="fake_diagnostics" value="'station_detector'"/>
		</include>
	</group>

	<!-- navigation -->
	<node ns="docker_control" pkg="cob_linear_nav" type="cob_linear_nav" respawn="false" name="move_base_linear" output="log">
		<!-- remap inputs -->
		<remap from="odom" to="/base/odometry_controller/odometry"/>
		<!-- remap outputs -->
		<remap from="cmd_vel" to="/base/twist_mux/command_navigation"/>
		<rosparam file="$(arg pkg_hardware_config)/robots/$(arg robot)/config/docking_linear_nav.yaml" command="load"/>
	</node>

	<!-- docker control -->
	<node pkg="cob_docker_control" type="multi_station_docker_control.py" respawn="false" name="docker_control" output="screen" if="$(arg multi_station)">
		<rosparam command="load" file="$(arg pkg_hardware_config)/robots/$(arg robot)/config/docking_stations.yaml"/>
	</node>

	<!-- virtual charging and power usage for simulation -->
	<node if="$(arg sim)" pkg="cob_docker_control" type="fake_docking.py" respawn="false" name="fake_docker_control" output="screen" />

</launch>
